import funkin.graphics.adobeanimate.FlxAtlasSprite;
import flixel.FlxG;
import funkin.audio.FunkinSound;
import funkin.play.character.MultiSparrowCharacter;
import funkin.play.GameOverSubState;
import funkin.play.PlayState;
import funkin.Preferences;
import funkin.play.character.CharacterType;

class BoyfriendGooeyCharacter extends MultiSparrowCharacter {
	function new() {
		super('bf-gooey');
	}

	override function playAnimation(name:String, restart:Bool, ignoreOther:Bool) {
		if (name == "fakeoutDeath" && !this.debug) {
			doFakeoutDeath();
		} else {
			super.playAnimation(name, restart, ignoreOther);
		}
	}

	function onNoteHit(event:HitNoteScriptEvent) {
		// Override the hit note animation.
		if (event.eventCanceled) {
			// onNoteHit event was cancelled by the gameplay module.
			return;
		}

		if (event.note.noteData.getMustHitNote() && characterType == CharacterType.BF) {
			switch (event.note.kind) {
				case "hey":
					holdTimer = 0;
					this.playAnimation('hey', false);
				case "cheer":
					holdTimer = 0;
					this.playAnimation('cheer', false);
				default:
					holdTimer = 0;
					this.playSingAnimation(event.note.noteData.getDirection(), false);
			}
		}
	}

	function doFakeoutDeath():Void {
		FunkinSound.playOnce(Paths.sound("gameplay/gameover/fakeout_death"), 1.0);

		var bfFakeout:FlxAtlasSprite = new FlxAtlasSprite(this.x - 440, this.y - 240, Paths.animateAtlas("characters/bfFakeOut", "shared"));
		FlxG.state.subState.add(bfFakeout);
		bfFakeout.zIndex = 1000;
		bfFakeout.playAnimation('');
		// We don't want people to miss this.
		FlxG.state.subState.mustNotExit = true;
		bfFakeout.onAnimationComplete.add(() -> {
			bfFakeout.visible = false;
			this.visible = true;
			FlxG.state.subState.mustNotExit = false;
			this.playAnimation('firstDeath', true, true);
			// Play the "blue balled" sound. May play a variant if one has been assigned.
			GameOverSubState.playBlueBalledSFX();
		});
		bfFakeout.visible = true;
		this.visible = false;
	}

	override function getDeathQuote():Null<String> {
		switch (PlayState.instance.currentStage.getDad().characterId) {
			case "tankman":
				var randomCensor:Array<Int> = [];

				if (!Preferences.naughtyness)
					randomCensor = [1, 3, 8, 13, 17, 21];
				return Paths.sound('jeffGameover/jeffGameover-' + FlxG.random.int(1, 25, randomCensor));
			default:
				return null;
		}
	}
}
